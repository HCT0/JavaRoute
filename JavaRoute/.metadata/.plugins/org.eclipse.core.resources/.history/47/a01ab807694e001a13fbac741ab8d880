package Thread;

import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
public class LockClass {
	public static String now() {
		return new SimpleDateFormat("HH:mm:ss").format(new Date());
		
	} 
	public static void  log(String msg) {
		 System.out.printf("%s %s %s %n", now() , Thread.currentThread().getName() , msg);
	}
	
	public static void main(String[] args) {
		Lock lock = new ReentrantLock();//lock
		Condition condition = lock.newCondition();//使用lock 进行交互
		
		Thread t1 = new Thread() {
			public void run() {
				try {
					log("线程启动");
					log("试图占有对象：Lock");
					lock.lock();
					log("占有对象");
					log("占有对象5秒");
					Thread.sleep(5000);
					condition.awit()
					
					
				}catch(InterruptedException e) {
					e.printStackTrace();
				}finally {
					log("释放对象");
					lock.unlock();
				}
			}
		};
		t1.setName("t1");
		t1.start();
		try {
			Thread.sleep(2000);
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
		
		Thread t2 = new Thread() {
			public void run() {
				boolean locked = false;
				try {
					log("线程启动");
					log("试图占有对象:lock");
					
					locked = lock.tryLock(1,TimeUnit.SECONDS);
					if(locked) {
						log("占有对象 Lock");
						log("占有对象 5 s");
						Thread.sleep(5000);
					}else {
						log("占有失败，放弃占有");
					}
				}catch(InterruptedException e) {
					e.printStackTrace();
				}finally {
					if(locked){
                        log("释放对象：lock");
                        lock.unlock();
                    }
				}
				log("线程结束");
			}
		};
		t2.setName("t2");
		t2.start();
		
		
	}
}
